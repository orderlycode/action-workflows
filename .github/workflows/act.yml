name: "Build and Deploy"
on:
  workflow_call:
jobs:
  setup:
    name: "Setup"
    runs-on: self-hosted
    outputs:
      image: ${{ steps.output.outputs.image }}
      release: ${{ steps.output.outputs.release }}
      app_name: ${{ steps.output.outputs.app_name }}
      release_version: ${{ steps.output.outputs.release_version }}
    steps:
      - id: latestRelease
        uses: thebritican/fetch-latest-release@v2.0.0
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Setup"
        id: parse
        shell: bash
        run: |
          APP_NAME=${GITHUB_REPOSITORY/$GITHUB_REPOSITORY_OWNER\//}
          CURRENT_VERSION=$(cat package.json | grep version | sed -e 's/version//g' | sed -e 's/[",: ]//g')
          LATEST_VERSION=${{ steps.latestRelease.outputs.tag_name }}
          
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "LATEST_VERSION=${{ steps.latestRelease.outputs.tag_name }}" >> $GITHUB_ENV
          
          echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
      - name: "Check version is newer"
        id: semver-tool
        uses: vitorfhc/use-semver-tool@v1
        with:
          cmd: compare ${{ env.CURRENT_VERSION }} ${{ env.LATEST_VERSION }}
      - name: "Set env if release"
        if: ${{ steps.semver-tool.outputs.output == 1 }}
        run: |
          echo "TAG=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "RELEASE=1"  >> $GITHUB_ENV
      - name: "Generate output"
        id: output
        run: |
          echo "image=hub.orderlycode.com/${{ github.repository }}:${TAG}" >> $GITHUB_OUTPUT
          echo "release=${RELEASE}" >> $GITHUB_OUTPUT
          echo "app_name=${APP_NAME}" >> $GITHUB_OUTPUT
          echo "release_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
  build-arm64:
    name: "Build and push arm64 docker image"
    needs: ['setup']
    runs-on: arm64-builder
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64
      - name: "Login to Docker"
        uses: docker/login-action@v2
        with:
          registry: hub.orderlycode.com
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: "Build and push"
        uses: docker/build-push-action@v4
        with:
          platforms: linux/arm64
          context: .
          push: true
          tags: ${{ needs.setup.outputs.image }}
  build-amd64:
    name: "Build and push amd64 docker image"
    needs: ['setup']
    runs-on: amd64-builder
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
      - name: "Login to Docker"
        uses: docker/login-action@v2
        with:
          registry: hub.orderlycode.com
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: "Build and push"
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          context: .
          push: true
          tags: ${{ needs.setup.outputs.image }}
  staging:
    name: "Deploy to staging"
    runs-on: self-hosted
    needs: ['setup', 'build-amd64', 'build-arm64']
    steps:
      - name: "Deploy"
        uses: orderlycode/action-k8s-deploy@main
        with:
          kubeConfig: ${{ secrets.K8S_STAGING }}
          name: ${{ needs.setup.outputs.app_name }}
          image: ${{ needs.setup.outputs.image }}
      - name: "Check env file existence"
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: ".env.staging"
      - name: "Apply env file as environment variable"
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          kubectl delete secret ${{ needs.setup.outputs.app_name }} --ignore-not-found=true
          kubectl create secret generic ${{ needs.setup.outputs.app_name }} --from-env-file=.env.staging
          kubectl set env --from=secret/${{ needs.setup.outputs.app_name }} deployment/${{ needs.setup.outputs.app_name }}
  production:
    name: "Deploy to production"
    runs-on: self-hosted
    permissions:
      contents: write
    if: ${{ needs.setup.outputs.release }}
    needs: ['setup', 'build-amd64', 'build-arm64']
    steps:
      - name: "Deploy"
        uses: orderlycode/action-k8s-deploy@main
        with:
          kubeConfig: ${{ secrets.K8S_PROD }}
          name: ${{ needs.setup.outputs.app_name }}
          image: ${{ needs.setup.outputs.image }}
      - name: "Check env file existence"
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: ".env.prod"
      - name: "Apply env file as environment variable"
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          kubectl delete secret ${{ needs.setup.outputs.app_name }} --ignore-not-found=true
          kubectl create secret generic ${{ needs.setup.outputs.app_name }} --from-env-file=.env.prod
          kubectl set env --from=secret/${{ needs.setup.outputs.app_name }} deployment/${{ needs.setup.outputs.app_name }}
      - name: "Github Release 생성"
        # https://github.com/nektos/act#skipping-jobs
        if: ${{ !github.event.act }}
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ needs.setup.outputs.release_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
